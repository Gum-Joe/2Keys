#!/usr/bin/env node
/**
 * Copyright 2020 Kishan Sambhi
 *
 * This file is part of 2Keys.
 *
 * 2Keys is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * 2Keys is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with 2Keys.  If not, see <https://www.gnu.org/licenses/>.
 */
const yargs = require("yargs");
const serve = require("../lib/index").default;
const { DEFAULT_PORT, DEFAULT_APP_PATHS } = require("../lib/util/constants");
const oobe = require("../lib/oobe").default;
const init = require("../lib/init").default;
const { stop_daemon, start_daemon } = require("../lib/init/daemon");
const { config_loader } = require("../lib/util/config");
const { fetch_hotkey, run_hotkey } = require("../lib/util/ahk");
const Logger = require("../lib/util/logger").default;
const { regenerateDaemons } = require("../lib/init/daemon");
const packageJSON = require("../package.json")

const logger = new Logger({
  name: "cli",
})

logger.info("2Keys");
logger.info(`Version: ${packageJSON.version}`);

// const argv = yargs.argv;

// tslint:disable-next-line: no-unused-expression
yargs
  .command("serve", "Start the 2Keys server", yarg => {
    yarg.option("port", {
      alias: "p",
      description: "Specify a port to run the server on (default: 9090)"
    });
    yarg.option("dir", {
      alias: "d",
      default: process.cwd(),
      description: "Specify the root directory, where the config is located"
    });
    yarg.option("pid-file", {
      description: "Specify a pid file to write",
    });
  }, async argv => {
    const config = await config_loader();
    process.chdir(argv.dir);
    const port = typeof argv.port === "number" ? parseInt(argv.port)
      :
      ((config.hasOwnProperty("addresses") && config.addresses.hasOwnProperty("server") && config.addresses.server.hasOwnProperty("port")) ? config.addresses.server.port : DEFAULT_PORT)
    serve(port, argv);
  })
  .command("oobe", "Runs OOBE; i.e. donwloads required components", yarg => {
    yarg.option("force", {
      alias: "f",
      description: "Force the creation of file, even if they exist"
    });
    /*
    yarg.option("install-components-to", {
      description: "Specify the location to install components to",
      default: DEFAULT_APP_PATHS
    });
    yarg.option("ahk-v2", {
      description: "Use AutoHotkey v2 (alpha) as the runner for hotkeys"
    });
    */
  }, argv => {
    oobe(argv);
  })
  .command("init", "Initialises a new 2Keys config", yarg => {
    yarg.option("force", {
      alias: "f",
      description: "Forcibly run OOBE & Init"
    });
    yarg.option("no-startup", {
      description: "Don't add 2Keys server to startup.  Daemon file will still be generated, just not added to startup",
      type: "boolean",
    });
    /**
    yarg.option("install-components-to", {
      description: "Specify the location to install components to during OOBE"
    });
    yarg.option("local", {
      alias: "l",
      description: "Install components locally, in ./.2Keys/",
    })
    yarg.option("ahk-v2", {
      description: "Use AutoHotkey v2 (alpha) as the runner for hotkeys"
    });
    */
    yarg.option("dir", {
      alias: "d",
      default: process.cwd(),
      description: "Specify the directory to initalise in"
    });
  }, argv => {
    process.chdir(argv.dir); // If needed
    init(argv);
  })
  .command("add", "Setup a new keyboard (and map it, only works if permission ssh is enabled)")
  .command("stop", "Stops 2Keys daemon server.", yarg => {
    yarg.option("dir", {
      alias: "d",
      default: process.cwd(),
      description: "Specify the directory to run in"
    });
  }, argv => {
    process.chdir(argv.dir); // If needed
    stop_daemon();
  })
  .command("start", "Starts 2Keys daemon server.", yarg => {
    yarg.option("dir", {
      alias: "d",
      default: process.cwd(),
      description: "Specify the directory to run in"
    });
  }, argv => {
    process.chdir(argv.dir); // If needed
    start_daemon();
  })
  .command("restart", "Restarts 2Keys daemon server.", yarg => {
    yarg.option("dir", {
      alias: "d",
      default: process.cwd(),
      description: "Specify the directory to run in"
    });
  }, argv => {
    process.chdir(argv.dir); // If needed
    stop_daemon()
      .then(() => start_daemon());
  })
  .command("fire <keyboard> <hotkey>", "Fires a hotkey, as in it runs the function that corresponds to it", yarg => {
    yarg.positional("keyboard", {
      describe: "Keyboard to \"fire\" from",
    });
    yarg.positional("hotkey", {
      describe: "Hotkey string to fire (i.e. ^C or $UP$)",
    });  
  }, argv => {
    fetch_hotkey(argv.keyboard, argv.hotkey)
      .then(data => run_hotkey(data.file, data.func))
      .catch(err => logger.throw(err));
  })
  .command("daemon-gen", "(Re)Generate daemon files (note: deletes old files)", (yarg) => {
    yarg.option("dir", {
      alias: "d",
      default: process.cwd(),
      description: "Specify the directory to run in"
    });
    yarg.option("no-startup", {
      description: "Don't add 2Keys server to startup.  Daemon file will still be generated, just not added to startup",
      type: "boolean",
    });
  }, async argv => {
      process.chdir(argv.dir); // If needed
      await regenerateDaemons(argv);
  })
  .argv;
