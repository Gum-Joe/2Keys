/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.5.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        // Use jcenter for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        // Use the maven repo
        mavenCentral()
    }

    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
        classpath 'com.kncept.junit5.reporter:junit-reporter:1.1.0'
        classpath 'edu.sc.seis.gradle:launch4j:2.4.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        // Generate JNA bindings
        classpath "org.anarres.gradle:gradle-jnaerator-plugin:1.0.0"
	    // https://github.com/etiennestuder/gradle-plugindev-plugin/issues/11
        classpath "com.nativelibs4java:jnaerator:0.11"
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'

    // For http://www.oblita.com/interception library
    id 'cpp'
    //id: 'google-test'

    // Msbuild
    id "com.ullink.msbuild" version "2.18"
}

// Base App
apply plugin: 'java'
apply plugin: 'application'

// Packaging
apply plugin: 'edu.sc.seis.launch4j' // For exe packaging
apply plugin: 'com.github.johnrengelman.shadow' // For packaging

// Plugins for testing
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.kncept.junit5.reporter'

// For JNA bindings
apply plugin: 'org.anarres.jnaerator'

// Define the main class for the application
mainClassName = 'com.gumjoe.twokeys.App'

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testCompile group: 'org.junit.platform', name: 'junit-platform-gradle-plugin', version: '1.1.0'
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.1.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.1.0'
    testCompile group: 'org.junit.platform', name: 'junit-platform-console-standalone', version: '1.1.0'

    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    // Use Apache Commons CLI to parse cli commands
    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'commons-io', name: 'commons-io', version: '2.6' 

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    // For CLI colours
    // https://mvnrepository.com/artifact/com.github.tomas-langer/chalk
    compile group: 'com.github.tomas-langer', name: 'chalk', version: '1.0.2'

    // JNA for c++ interface
    // compile 'net.java.dev.jna:jna:4.5.1'
    // compile 'net.java.dev.jna:jna-platform:4.5.1'

    // YAML parser
    // https://mvnrepository.com/artifact/com.esotericsoftware.yamlbeans/yamlbeans
    compile group: 'com.esotericsoftware.yamlbeans', name: 'yamlbeans', version: '1.13'


}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    // Use the maven repo
    mavenCentral()
}

run { 
    args = ["init", "--debug", "-d", "./example"]
}

junitPlatform {
    platformVersion '1.1.0' // optional, defaults to plugin version
    reportsDir file('build/test-results/junit-platform') // this is the default
    // enableStandardTestTask true
    // selectors (optional)
    // filters (optional)
    // logManager (optional)
}

createExe.dependsOn shadowJar

launch4j {
  mainClassName = 'com.gumjoe.twokeys.App'
  icon = "${projectDir}/lib/icons/2Keys.ico"
  outfile = "2keys.exe"
    jar = "${projectDir}/build/libs/2Keys-all.jar"
}

// C++ compile to use interceptionn 
model { 
    repositories {
        libs(PrebuiltLibraries) { 
            /**googleTest { 
                headers.srcDir new File(projectDir, "3rdparty/googletest-master/googletest/include") 
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file(projectDir.getPath() + "/3rdparty/googletest-master/googletest/build/" + findGoogleTestStaticLib(targetPlatform)) 
                }
            }*/
            interception { 
                headers.srcDir new File(projectDir, "/lib/interception/library") 
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file(projectDir.getPath() + "/lib/interception/library/x64/interception.lib") 
                }
            }
        }
    }
    components {
        // twokeys(NativeLibrarySpec) { } 
        // Let's try using the library
        main(NativeLibrarySpec) {
            targetPlatform "x64"
        }
    }


    binaries {
        withType(SharedLibraryBinarySpec) {
            if (toolChain in VisualCpp) {
                lib library: "interception", linkage: "static"
                cppCompiler.args "-I${projectDir}/lib/interception/library"
                cppCompiler.args "-I${projectDir}/lib/interception/library/x64"
                //cppCompiler.args "-I${projectDir}/lib/interception/library/x86"
                cppCompiler.define "DLL_EXPORT" 
            }
        }

        withType(StaticLibraryBinarySpec) {
            buildable = false
        }
    }

    platforms {
        x64 {
            architecture "amd64"
            operatingSystem "windows"
        }
    }
}

jnaerator {
	libraryName 'cpp'
	packageName 'com.gumjoe.twokeys.cpp'
	headerFiles "${projectDir}/src/main/headers/get-keyboard-id.hpp"
	// runtimeMode "JNAerator"
	// define "FOO=bar", "ANSWER=42"
	// extraArgs "-v", "-foo", "-bar"
}

def findInterception(Platform p) {
    if (p.architecture == "amd64") {
        return "/x64/interception.dll"
    } else {
        return "/x86/interception.dll"
    }
}

msbuild {
  // mandatory (one of those)
  solutionFile = 'lib/rawinput/RawStuff.sln'
  
  // MsBuild project name (/p:Project=...)
  projectName = project.name
  
  // targets to execute (/t:Clean;Rebuild, no default)
  targets = ['Clean', 'Rebuild']
  
  // Below values can override settings from the project file
  
  // overrides project OutputPath
  destinationDir = 'build/lib/rawinput/x64/bin'
  
  // overrides project IntermediaryOutputPath
  intermediateDir = 'build/lib/rawinput/x64/obj'
  
  // Generates XML documentation file (from javadoc through custom DocLet)
  generateDoc = false
  
  // Other msbuild options can be set:
  // loggerAssembly, generateDoc, debugType, optimize, debugSymbols, configuration, platform, defineConstants ...
  
  // you can also provide properties by name (/p:SomeProperty=Value)
  parameters.SomeProperty = 'Value'
  
  // Or, if you use built-in msbuild parameters that aren't directly available here,
  // you can take advantage of the ExtensionAware interface
  ext["flp1"] = "LogFile=" + file("${project.name}.errors.log").path + ";ErrorsOnly;Verbosity=diag"
}