# -*- mode: ruby -*-
# vi: set ft=ruby :
# (^ some stuff for your editior so you get syntax highlighting)
# (you probably want to install an extension for ruby syntax hightlighting and use that for this file.)

#  ____    ___  ____ ___        ___ ___   ___      _____ ____ ____   ___________    
# |    \  /  _]/    |   \      |   |   | /  _]    |     |    |    \ / ___/      |__ 
# |  D  )/  [_|  o  |    \     | _   _ |/  [_     |   __||  ||  D  )   \_|      |  |
# |    /|    _]     |  D  |    |  \_/  |    _]    |  |_  |  ||    / \__  |_|  |_|__|
# |    \|   [_|  _  |     |    |   |   |   [_     |   _] |  ||    \ /  \ | |  |  __ 
# |  .  \     |  |  |     |    |   |   |     |    |  |   |  ||  .  \\    | |  | |  |
# |__|\_|_____|__|__|_____|    |___|___|_____|    |__|  |____|__|\_| \___| |__| |__|
#################################################################################
# FILE AUTOGENERATED BY 2KEYS FROM VAGRANT DEFAULTS
# DO NOT MOFIY UNLESS YOU KNOW WHAT YOU ARE DOING
################################################
# IF YOU ARE MODIFYING THIS, MODIFY Vagrantfile.template SO THAT YOUR
# MODIFICATIONS ARE NOT OVERWRITTEN WHEN THE VARGRANTFILE IS RECREATED
################################################
#################################################################################

### VM INFO ###
# VM INFO:
# 256 MB of RAM (usually uses 50 MB)
# 1 CPU core (CPU usage is minimal)
# USB 1.1 passthrough enabled
### VM INFO ###

# Ascii art from http://patorjk.com/software/taag-v1/, Font Crawford2

### BEGIN TWOKEYS VM VAGRANT FILE ###
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # We use alpine since it's light weight.
  # See https://app.vagrantup.com/alpine/boxes/alpine64 for more info 
  config.vm.box = "alpine/alpine64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  #### 2Keys related customisations to the VM ####
  #### INCLUDES USB PASSTHROUGH ####
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true

    # Customize the amount of memory on the VM:
    # vb.memory = "256"

    # Passthrough
    # WARNING! IF YOU INSTALL THE VBOX EXTENSION PACK FOR USB 2.0+ YOU MAY NEED TO PAY FOR A COMMERICAL LICENSE FOR IT!
    # USB 1.1 PASSTHROUGH IS INCLUDED WITH VBOX AND DOES NOT REQUIRE ANY EXTRA (PAID) LICENSES
    vb.customize ["modifyvm", :id, "--usb", "on"] # Enable USB 1.1 passthrough (don't really need faster speeds)
    # 2KEYS BEGIN USB PASSTHROUGH SECTION
    # vb.customize ['usbfilter', 'add', '0', '--target', :id, '--name', 'NUMPADAPPS', '--vendorid', '0x04d9', '--productid', '0x1203']
{{{ twokeys_insert_usb_passthrough }}}
    # 2KEYS END USB PASSTHROUGH SECTION
  end

  ### PROVISING SECTION. INCLUDES SCRIPTS TO SETUP THE VM ###
  # Prepare VM for provisioning
  config.vm.provision "shell", path: "ansible/base/pre-provision.sh"

  # Run Ansible from the Vagrant VM
  # This configures the VM, installing all neccesary packages (including 2Keys config)
  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = "ansible/base/provision.yml"
  end

  # Installs 2Keys from source!
  # TODO: Remove this once PyPi package published and before closing #72
  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = "ansible/base/twokeys-oss.yml"
  end

  ## PROVISIONING SCRIPT TO SETUP CLIENT ##
  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = "ansible/client/provision.yml"
  end

  # 2KEYS BEGIN CUSTOM ANSIBLE PROVISING SCRIPTS
  ## PROVISING SCRIPTS TO SETUPP PROJECTS, KEYBOARDS ETC
{{{ twokeys_insert_ansible_provising }}}
  # 2KEYS END CUSTOM ANSIBLE PROVISING SCRIPTS

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
